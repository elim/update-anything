#!/usr/bin/env ruby
# -*- mode: ruby; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Author::    Takeru Naito (mailto:takeru.naito@gmail.com)
# Copyright:: Copyright (c) 2008 Takeru Naito
# License::   Distributes under the same terms as Ruby
#
#
#= anything が更新されていたら、ダウンロードします。そんだけ。
#
#
#==依存ライブラリ
#
#*mechanize
#
#
#==使用方法
#% ./update-anything
#

require 'rubygems'
require 'mechanize'
require 'logger'

require 'tempfile'

class UpdateAnything
  def initialize(opts = {})
    @agent  = WWW::Mechanize.new do |a|
      a.max_history      = 1
      a.user_agent_alias = 'Mac FireFox'
      a.log              = Logger.new(opts[:log_output])
      a.log.level        = opts[:log_level]
    end
  end

  def run
    analyze_el_page
  end

  private
  def fetch(uri)
    begin
      sleep 2 #wait
      @agent.get(uri)
    rescue Timeout::Error
      @agent.log.warn "  caught Timeout::Error !"
      retry
    rescue WWW::Mechanize::ResponseCodeError => e
      case e.response_code
      when "502"
        @agent.log.warn "  caught Net::HTTPBadGateway !"
        retry
      when "404"
        @agent.log.warn "  caught Net::HTTPNotFound !"
      else
        @agent.log.warn "  caught Excepcion !" + e.response_code
      end
    end
  end

  def analyze_el_page
    url_base = "http://www.emacswiki.org/cgi-bin/wiki/download/"
    anythings = Dir::glob("*el")

    anythings.each do |fname|
      local_version, remote_version = nil
      versions_regexp = Regexp::union(
        /version.+(\<.+\>)/, # anything-config.el
        /\$Id.+(\d+\.\d+)/   # other
        )

      ## local
      File::open(fname).each do |line|
        if line =~ versions_regexp
          local_version ||= Regexp::last_match[1] || Regexp::last_match[2]
        end
      end

      ## remote
      t = Tempfile.open(['any', 'any'])
      t.puts fetch("#{url_base}#{fname}").body
      t.close; t.open
      t.each do |line|
        if line =~ versions_regexp
          remote_version ||= Regexp::last_match[1] || Regexp::last_match[2]
         end
      end

      puts "filefilename +
        "local_version  => #{local_version}" +
      "remote_version => #{remote_version}"
    end
  end
end

if $0 == __FILE__
  require 'optparse'

  opts = {
    :log_output => STDERR,
    :log_level  => Logger::WARN
  }

  OptionParser.new do |parser|
    parser.instance_eval do
      on('-v', '--verbose', 'verbose mode') do |arg|
        opts[:log_level] = Logger::INFO
      end

      on('-d', '--debug', 'debug mode') do |arg|
        opts[:log_level]  = Logger::DEBUG
      end
      parse!
    end
  end

  UpdateAnything.new(opts).run
end
